package com.ihsinformatics.dynamicformsgenerator.data.pojos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENCOUNTERS_WITH_OBS".
*/
public class EncountersWithObsDao extends AbstractDao<EncountersWithObs, String> {

    public static final String TABLENAME = "ENCOUNTERS_WITH_OBS";

    /**
     * Properties of entity EncountersWithObs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Uuid = new Property(1, String.class, "uuid", true, "UUID");
        public final static Property EncounterDatetime = new Property(2, String.class, "encounterDatetime", false, "ENCOUNTER_DATETIME");
        public final static Property Obs = new Property(3, String.class, "obs", false, "OBS");
    }


    public EncountersWithObsDao(DaoConfig config) {
        super(config);
    }
    
    public EncountersWithObsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENCOUNTERS_WITH_OBS\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"UUID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 1: uuid
                "\"ENCOUNTER_DATETIME\" TEXT," + // 2: encounterDatetime
                "\"OBS\" TEXT);"); // 3: obs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENCOUNTERS_WITH_OBS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EncountersWithObs entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String encounterDatetime = entity.getEncounterDatetime();
        if (encounterDatetime != null) {
            stmt.bindString(3, encounterDatetime);
        }
 
        String obs = entity.getObs();
        if (obs != null) {
            stmt.bindString(4, obs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EncountersWithObs entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String encounterDatetime = entity.getEncounterDatetime();
        if (encounterDatetime != null) {
            stmt.bindString(3, encounterDatetime);
        }
 
        String obs = entity.getObs();
        if (obs != null) {
            stmt.bindString(4, obs);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public EncountersWithObs readEntity(Cursor cursor, int offset) {
        EncountersWithObs entity = new EncountersWithObs( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // encounterDatetime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // obs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EncountersWithObs entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEncounterDatetime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setObs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EncountersWithObs entity, long rowId) {
        return entity.getUuid();
    }
    
    @Override
    public String getKey(EncountersWithObs entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EncountersWithObs entity) {
        return entity.getUuid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
