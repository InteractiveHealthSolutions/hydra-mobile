package com.ihsinformatics.dynamicformsgenerator.data.pojos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION".
*/
public class LocationDao extends AbstractDao<Location, Long> {

    public static final String TABLENAME = "LOCATION";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Country = new Property(3, String.class, "country", false, "COUNTRY");
        public final static Property StateProvince = new Property(4, String.class, "stateProvince", false, "STATE_PROVINCE");
        public final static Property CountryDistrict = new Property(5, String.class, "countryDistrict", false, "COUNTRY_DISTRICT");
        public final static Property CityVillage = new Property(6, String.class, "cityVillage", false, "CITY_VILLAGE");
        public final static Property Address1 = new Property(7, String.class, "address1", false, "ADDRESS1");
        public final static Property Address2 = new Property(8, String.class, "address2", false, "ADDRESS2");
        public final static Property Address3 = new Property(9, String.class, "address3", false, "ADDRESS3");
        public final static Property Address4 = new Property(10, String.class, "address4", false, "ADDRESS4");
        public final static Property Address5 = new Property(11, String.class, "address5", false, "ADDRESS5");
        public final static Property Address6 = new Property(12, String.class, "address6", false, "ADDRESS6");
        public final static Property Voided = new Property(13, Boolean.class, "voided", false, "VOIDED");
        public final static Property ParentLocationUUID = new Property(14, String.class, "parentLocationUUID", false, "PARENT_LOCATION_UUID");
    }


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUID\" TEXT UNIQUE ," + // 1: uuid
                "\"NAME\" TEXT," + // 2: name
                "\"COUNTRY\" TEXT," + // 3: country
                "\"STATE_PROVINCE\" TEXT," + // 4: stateProvince
                "\"COUNTRY_DISTRICT\" TEXT," + // 5: countryDistrict
                "\"CITY_VILLAGE\" TEXT," + // 6: cityVillage
                "\"ADDRESS1\" TEXT," + // 7: address1
                "\"ADDRESS2\" TEXT," + // 8: address2
                "\"ADDRESS3\" TEXT," + // 9: address3
                "\"ADDRESS4\" TEXT," + // 10: address4
                "\"ADDRESS5\" TEXT," + // 11: address5
                "\"ADDRESS6\" TEXT," + // 12: address6
                "\"VOIDED\" INTEGER," + // 13: voided
                "\"PARENT_LOCATION_UUID\" TEXT);"); // 14: parentLocationUUID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String stateProvince = entity.getStateProvince();
        if (stateProvince != null) {
            stmt.bindString(5, stateProvince);
        }
 
        String countryDistrict = entity.getCountryDistrict();
        if (countryDistrict != null) {
            stmt.bindString(6, countryDistrict);
        }
 
        String cityVillage = entity.getCityVillage();
        if (cityVillage != null) {
            stmt.bindString(7, cityVillage);
        }
 
        String address1 = entity.getAddress1();
        if (address1 != null) {
            stmt.bindString(8, address1);
        }
 
        String address2 = entity.getAddress2();
        if (address2 != null) {
            stmt.bindString(9, address2);
        }
 
        String address3 = entity.getAddress3();
        if (address3 != null) {
            stmt.bindString(10, address3);
        }
 
        String address4 = entity.getAddress4();
        if (address4 != null) {
            stmt.bindString(11, address4);
        }
 
        String address5 = entity.getAddress5();
        if (address5 != null) {
            stmt.bindString(12, address5);
        }
 
        String address6 = entity.getAddress6();
        if (address6 != null) {
            stmt.bindString(13, address6);
        }
 
        Boolean voided = entity.getVoided();
        if (voided != null) {
            stmt.bindLong(14, voided ? 1L: 0L);
        }
 
        String parentLocationUUID = entity.getParentLocationUUID();
        if (parentLocationUUID != null) {
            stmt.bindString(15, parentLocationUUID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        String stateProvince = entity.getStateProvince();
        if (stateProvince != null) {
            stmt.bindString(5, stateProvince);
        }
 
        String countryDistrict = entity.getCountryDistrict();
        if (countryDistrict != null) {
            stmt.bindString(6, countryDistrict);
        }
 
        String cityVillage = entity.getCityVillage();
        if (cityVillage != null) {
            stmt.bindString(7, cityVillage);
        }
 
        String address1 = entity.getAddress1();
        if (address1 != null) {
            stmt.bindString(8, address1);
        }
 
        String address2 = entity.getAddress2();
        if (address2 != null) {
            stmt.bindString(9, address2);
        }
 
        String address3 = entity.getAddress3();
        if (address3 != null) {
            stmt.bindString(10, address3);
        }
 
        String address4 = entity.getAddress4();
        if (address4 != null) {
            stmt.bindString(11, address4);
        }
 
        String address5 = entity.getAddress5();
        if (address5 != null) {
            stmt.bindString(12, address5);
        }
 
        String address6 = entity.getAddress6();
        if (address6 != null) {
            stmt.bindString(13, address6);
        }
 
        Boolean voided = entity.getVoided();
        if (voided != null) {
            stmt.bindLong(14, voided ? 1L: 0L);
        }
 
        String parentLocationUUID = entity.getParentLocationUUID();
        if (parentLocationUUID != null) {
            stmt.bindString(15, parentLocationUUID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // country
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stateProvince
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // countryDistrict
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cityVillage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address4
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address5
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address6
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // voided
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // parentLocationUUID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountry(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStateProvince(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountryDistrict(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCityVillage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress4(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddress5(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress6(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVoided(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setParentLocationUUID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Location entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Location entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Location entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
