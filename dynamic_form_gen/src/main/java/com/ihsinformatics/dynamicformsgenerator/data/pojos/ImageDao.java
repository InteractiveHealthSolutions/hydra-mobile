package com.ihsinformatics.dynamicformsgenerator.data.pojos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ihsinformatics.dynamicformsgenerator.data.database.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "image".
*/
public class ImageDao extends AbstractDao<Image, Long> {

    public static final String TABLENAME = "image";

    /**
     * Properties of entity Image.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImageId = new Property(0, Long.class, "imageId", true, "_id");
        public final static Property FormId = new Property(1, long.class, "formId", false, "form_id");
        public final static Property FormUUID = new Property(2, String.class, "formUUID", false, "form_uuid");
        public final static Property StringImageMetadata = new Property(3, String.class, "stringImageMetadata", false, "image_metadata");
        public final static Property ImageContent = new Property(4, byte[].class, "imageContent", false, "image_content");
        public final static Property ImageError = new Property(5, String.class, "imageError", false, "image_error");
    }


    public ImageDao(DaoConfig config) {
        super(config);
    }
    
    public ImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"image\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: imageId
                "\"form_id\" INTEGER NOT NULL ," + // 1: formId
                "\"form_uuid\" TEXT," + // 2: formUUID
                "\"image_metadata\" TEXT," + // 3: stringImageMetadata
                "\"image_content\" BLOB NOT NULL ," + // 4: imageContent
                "\"image_error\" TEXT);"); // 5: imageError
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"image\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Image entity) {
        stmt.clearBindings();
 
        Long imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindLong(1, imageId);
        }
        stmt.bindLong(2, entity.getFormId());
 
        String formUUID = entity.getFormUUID();
        if (formUUID != null) {
            stmt.bindString(3, formUUID);
        }
 
        String stringImageMetadata = entity.getStringImageMetadata();
        if (stringImageMetadata != null) {
            stmt.bindString(4, stringImageMetadata);
        }
        stmt.bindBlob(5, entity.getImageContent());
 
        String imageError = entity.getImageError();
        if (imageError != null) {
            stmt.bindString(6, imageError);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Image entity) {
        stmt.clearBindings();
 
        Long imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindLong(1, imageId);
        }
        stmt.bindLong(2, entity.getFormId());
 
        String formUUID = entity.getFormUUID();
        if (formUUID != null) {
            stmt.bindString(3, formUUID);
        }
 
        String stringImageMetadata = entity.getStringImageMetadata();
        if (stringImageMetadata != null) {
            stmt.bindString(4, stringImageMetadata);
        }
        stmt.bindBlob(5, entity.getImageContent());
 
        String imageError = entity.getImageError();
        if (imageError != null) {
            stmt.bindString(6, imageError);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Image readEntity(Cursor cursor, int offset) {
        Image entity = new Image( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // imageId
            cursor.getLong(offset + 1), // formId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // formUUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stringImageMetadata
            cursor.getBlob(offset + 4), // imageContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // imageError
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Image entity, int offset) {
        entity.setImageId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFormId(cursor.getLong(offset + 1));
        entity.setFormUUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStringImageMetadata(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageContent(cursor.getBlob(offset + 4));
        entity.setImageError(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Image entity, long rowId) {
        entity.setImageId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Image entity) {
        if(entity != null) {
            return entity.getImageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Image entity) {
        return entity.getImageId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
