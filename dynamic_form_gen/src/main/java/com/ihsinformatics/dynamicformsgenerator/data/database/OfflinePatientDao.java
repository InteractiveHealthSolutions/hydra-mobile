package com.ihsinformatics.dynamicformsgenerator.data.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "offline_patient".
*/
public class OfflinePatientDao extends AbstractDao<OfflinePatient, Long> {

    public static final String TABLENAME = "offline_patient";

    /**
     * Properties of entity OfflinePatient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MrNumber = new Property(0, String.class, "mrNumber", false, "mr_number");
        public final static Property PqId = new Property(1, String.class, "pqId", false, "pq_id");
        public final static Property ScId = new Property(2, String.class, "scId", false, "sc_id");
        public final static Property Contact = new Property(3, String.class, "contact", false, "contact");
        public final static Property Nic = new Property(4, String.class, "nic", false, "nic");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
        public final static Property Name = new Property(6, String.class, "name", false, "patient_name");
        public final static Property Gender = new Property(7, String.class, "gender", false, "gender");
        public final static Property Dob = new Property(8, Long.class, "dob", false, "date_ofBirth");
        public final static Property EncounterJson = new Property(9, String.class, "encounterJson", false, "encounters_json");
        public final static Property FieldDataJson = new Property(10, String.class, "fieldDataJson", false, "fields_data_json");
        public final static Property CovidResult = new Property(11, String.class, "covidResult", false, "covidResult");
    }


    public OfflinePatientDao(DaoConfig config) {
        super(config);
    }
    
    public OfflinePatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"offline_patient\" (" + //
                "\"mr_number\" TEXT NOT NULL UNIQUE ," + // 0: mrNumber
                "\"pq_id\" TEXT UNIQUE ," + // 1: pqId
                "\"sc_id\" TEXT UNIQUE ," + // 2: scId
                "\"contact\" TEXT," + // 3: contact
                "\"nic\" TEXT," + // 4: nic
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 5: id
                "\"patient_name\" TEXT," + // 6: name
                "\"gender\" TEXT NOT NULL ," + // 7: gender
                "\"date_ofBirth\" INTEGER," + // 8: dob
                "\"encounters_json\" TEXT NOT NULL ," + // 9: encounterJson
                "\"fields_data_json\" TEXT," + // 10: fieldDataJson
                "\"covidResult\" TEXT);"); // 11: covidResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"offline_patient\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OfflinePatient entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMrNumber());
 
        String pqId = entity.getPqId();
        if (pqId != null) {
            stmt.bindString(2, pqId);
        }
 
        String scId = entity.getScId();
        if (scId != null) {
            stmt.bindString(3, scId);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(4, contact);
        }
 
        String nic = entity.getNic();
        if (nic != null) {
            stmt.bindString(5, nic);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindString(8, entity.getGender());
 
        Long dob = entity.getDob();
        if (dob != null) {
            stmt.bindLong(9, dob);
        }
        stmt.bindString(10, entity.getEncounterJson());
 
        String fieldDataJson = entity.getFieldDataJson();
        if (fieldDataJson != null) {
            stmt.bindString(11, fieldDataJson);
        }
 
        String covidResult = entity.getCovidResult();
        if (covidResult != null) {
            stmt.bindString(12, covidResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OfflinePatient entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMrNumber());
 
        String pqId = entity.getPqId();
        if (pqId != null) {
            stmt.bindString(2, pqId);
        }
 
        String scId = entity.getScId();
        if (scId != null) {
            stmt.bindString(3, scId);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(4, contact);
        }
 
        String nic = entity.getNic();
        if (nic != null) {
            stmt.bindString(5, nic);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindString(8, entity.getGender());
 
        Long dob = entity.getDob();
        if (dob != null) {
            stmt.bindLong(9, dob);
        }
        stmt.bindString(10, entity.getEncounterJson());
 
        String fieldDataJson = entity.getFieldDataJson();
        if (fieldDataJson != null) {
            stmt.bindString(11, fieldDataJson);
        }
 
        String covidResult = entity.getCovidResult();
        if (covidResult != null) {
            stmt.bindString(12, covidResult);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public OfflinePatient readEntity(Cursor cursor, int offset) {
        OfflinePatient entity = new OfflinePatient( //
            cursor.getString(offset + 0), // mrNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pqId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // scId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contact
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nic
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.getString(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // dob
            cursor.getString(offset + 9), // encounterJson
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fieldDataJson
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // covidResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OfflinePatient entity, int offset) {
        entity.setMrNumber(cursor.getString(offset + 0));
        entity.setPqId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContact(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.getString(offset + 7));
        entity.setDob(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setEncounterJson(cursor.getString(offset + 9));
        entity.setFieldDataJson(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCovidResult(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OfflinePatient entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OfflinePatient entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OfflinePatient entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
