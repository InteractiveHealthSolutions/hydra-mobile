package com.ihsinformatics.dynamicformsgenerator.data.pojos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ihsinformatics.dynamicformsgenerator.data.database.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "history".
*/
public class HistoryDao extends AbstractDao<History, Long> {

    public static final String TABLENAME = "history";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property PatientIdentifier = new Property(1, String.class, "patientIdentifier", false, "patientIdentifier");
        public final static Property ComponentFormUUID = new Property(2, String.class, "componentFormUUID", false, "componentFormUUID");
        public final static Property ComponentFormID = new Property(3, long.class, "componentFormID", false, "componentFormID");
        public final static Property PhaseUUID = new Property(4, String.class, "phaseUUID", false, "phaseUUID");
        public final static Property PhaseID = new Property(5, long.class, "phaseID", false, "phaseID");
        public final static Property ComponentUUID = new Property(6, String.class, "componentUUID", false, "componentUUID");
        public final static Property ComponentID = new Property(7, long.class, "componentID", false, "componentID");
        public final static Property WorkflowUUID = new Property(8, String.class, "workflowUUID", false, "workflowUUID");
        public final static Property WorkflowID = new Property(9, long.class, "WorkflowID", false, "WorkflowID");
        public final static Property FormUUID = new Property(10, String.class, "formUUID", false, "formUUID");
        public final static Property FormID = new Property(11, long.class, "formID", false, "formID");
        public final static Property Encounter = new Property(12, String.class, "encounter", false, "encounter");
        public final static Property EncounterDateTime = new Property(13, String.class, "encounterDateTime", false, "encounterDateTime");
    }


    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"history\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"patientIdentifier\" TEXT NOT NULL ," + // 1: patientIdentifier
                "\"componentFormUUID\" TEXT," + // 2: componentFormUUID
                "\"componentFormID\" INTEGER NOT NULL ," + // 3: componentFormID
                "\"phaseUUID\" TEXT," + // 4: phaseUUID
                "\"phaseID\" INTEGER NOT NULL ," + // 5: phaseID
                "\"componentUUID\" TEXT," + // 6: componentUUID
                "\"componentID\" INTEGER NOT NULL ," + // 7: componentID
                "\"workflowUUID\" TEXT," + // 8: workflowUUID
                "\"WorkflowID\" INTEGER NOT NULL ," + // 9: WorkflowID
                "\"formUUID\" TEXT," + // 10: formUUID
                "\"formID\" INTEGER NOT NULL ," + // 11: formID
                "\"encounter\" TEXT," + // 12: encounter
                "\"encounterDateTime\" TEXT);"); // 13: encounterDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"history\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, History entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientIdentifier());
 
        String componentFormUUID = entity.getComponentFormUUID();
        if (componentFormUUID != null) {
            stmt.bindString(3, componentFormUUID);
        }
        stmt.bindLong(4, entity.getComponentFormID());
 
        String phaseUUID = entity.getPhaseUUID();
        if (phaseUUID != null) {
            stmt.bindString(5, phaseUUID);
        }
        stmt.bindLong(6, entity.getPhaseID());
 
        String componentUUID = entity.getComponentUUID();
        if (componentUUID != null) {
            stmt.bindString(7, componentUUID);
        }
        stmt.bindLong(8, entity.getComponentID());
 
        String workflowUUID = entity.getWorkflowUUID();
        if (workflowUUID != null) {
            stmt.bindString(9, workflowUUID);
        }
        stmt.bindLong(10, entity.getWorkflowID());
 
        String formUUID = entity.getFormUUID();
        if (formUUID != null) {
            stmt.bindString(11, formUUID);
        }
        stmt.bindLong(12, entity.getFormID());
 
        String encounter = entity.getEncounter();
        if (encounter != null) {
            stmt.bindString(13, encounter);
        }
 
        String encounterDateTime = entity.getEncounterDateTime();
        if (encounterDateTime != null) {
            stmt.bindString(14, encounterDateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, History entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientIdentifier());
 
        String componentFormUUID = entity.getComponentFormUUID();
        if (componentFormUUID != null) {
            stmt.bindString(3, componentFormUUID);
        }
        stmt.bindLong(4, entity.getComponentFormID());
 
        String phaseUUID = entity.getPhaseUUID();
        if (phaseUUID != null) {
            stmt.bindString(5, phaseUUID);
        }
        stmt.bindLong(6, entity.getPhaseID());
 
        String componentUUID = entity.getComponentUUID();
        if (componentUUID != null) {
            stmt.bindString(7, componentUUID);
        }
        stmt.bindLong(8, entity.getComponentID());
 
        String workflowUUID = entity.getWorkflowUUID();
        if (workflowUUID != null) {
            stmt.bindString(9, workflowUUID);
        }
        stmt.bindLong(10, entity.getWorkflowID());
 
        String formUUID = entity.getFormUUID();
        if (formUUID != null) {
            stmt.bindString(11, formUUID);
        }
        stmt.bindLong(12, entity.getFormID());
 
        String encounter = entity.getEncounter();
        if (encounter != null) {
            stmt.bindString(13, encounter);
        }
 
        String encounterDateTime = entity.getEncounterDateTime();
        if (encounterDateTime != null) {
            stmt.bindString(14, encounterDateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // patientIdentifier
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // componentFormUUID
            cursor.getLong(offset + 3), // componentFormID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phaseUUID
            cursor.getLong(offset + 5), // phaseID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // componentUUID
            cursor.getLong(offset + 7), // componentID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // workflowUUID
            cursor.getLong(offset + 9), // WorkflowID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // formUUID
            cursor.getLong(offset + 11), // formID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // encounter
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // encounterDateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientIdentifier(cursor.getString(offset + 1));
        entity.setComponentFormUUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComponentFormID(cursor.getLong(offset + 3));
        entity.setPhaseUUID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhaseID(cursor.getLong(offset + 5));
        entity.setComponentUUID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComponentID(cursor.getLong(offset + 7));
        entity.setWorkflowUUID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWorkflowID(cursor.getLong(offset + 9));
        entity.setFormUUID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFormID(cursor.getLong(offset + 11));
        entity.setEncounter(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEncounterDateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(History entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(History entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(History entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
