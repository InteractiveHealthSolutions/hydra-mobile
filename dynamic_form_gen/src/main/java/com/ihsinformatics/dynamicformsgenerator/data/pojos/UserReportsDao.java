package com.ihsinformatics.dynamicformsgenerator.data.pojos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserReports".
*/
public class UserReportsDao extends AbstractDao<UserReports, Long> {

    public static final String TABLENAME = "UserReports";

    /**
     * Properties of entity UserReports.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "username", false, "username");
        public final static Property Encounter = new Property(1, String.class, "encounter", false, "encounter");
        public final static Property Offline_form_id = new Property(2, long.class, "offline_form_id", false, "offline_form_id");
        public final static Property Encounter_filled = new Property(3, long.class, "encounter_filled", false, "encounter_filled");
        public final static Property Encounter_uploaded = new Property(4, long.class, "encounter_uploaded", false, "encounter_uploaded");
        public final static Property Date = new Property(5, String.class, "date", false, "date");
        public final static Property WorkflowUUID = new Property(6, String.class, "workflowUUID", false, "workflowUUID");
        public final static Property ComponentFormUUID = new Property(7, String.class, "componentFormUUID", false, "componentFormUUID");
        public final static Property Url = new Property(8, String.class, "url", false, "url");
        public final static Property Id = new Property(9, Long.class, "id", true, "id");
    }


    public UserReportsDao(DaoConfig config) {
        super(config);
    }
    
    public UserReportsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserReports\" (" + //
                "\"username\" TEXT," + // 0: username
                "\"encounter\" TEXT," + // 1: encounter
                "\"offline_form_id\" INTEGER NOT NULL ," + // 2: offline_form_id
                "\"encounter_filled\" INTEGER NOT NULL ," + // 3: encounter_filled
                "\"encounter_uploaded\" INTEGER NOT NULL ," + // 4: encounter_uploaded
                "\"date\" TEXT," + // 5: date
                "\"workflowUUID\" TEXT," + // 6: workflowUUID
                "\"componentFormUUID\" TEXT," + // 7: componentFormUUID
                "\"url\" TEXT," + // 8: url
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 9: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserReports\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserReports entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
 
        String encounter = entity.getEncounter();
        if (encounter != null) {
            stmt.bindString(2, encounter);
        }
        stmt.bindLong(3, entity.getOffline_form_id());
        stmt.bindLong(4, entity.getEncounter_filled());
        stmt.bindLong(5, entity.getEncounter_uploaded());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String workflowUUID = entity.getWorkflowUUID();
        if (workflowUUID != null) {
            stmt.bindString(7, workflowUUID);
        }
 
        String componentFormUUID = entity.getComponentFormUUID();
        if (componentFormUUID != null) {
            stmt.bindString(8, componentFormUUID);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(10, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserReports entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
 
        String encounter = entity.getEncounter();
        if (encounter != null) {
            stmt.bindString(2, encounter);
        }
        stmt.bindLong(3, entity.getOffline_form_id());
        stmt.bindLong(4, entity.getEncounter_filled());
        stmt.bindLong(5, entity.getEncounter_uploaded());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String workflowUUID = entity.getWorkflowUUID();
        if (workflowUUID != null) {
            stmt.bindString(7, workflowUUID);
        }
 
        String componentFormUUID = entity.getComponentFormUUID();
        if (componentFormUUID != null) {
            stmt.bindString(8, componentFormUUID);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(10, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9);
    }    

    @Override
    public UserReports readEntity(Cursor cursor, int offset) {
        UserReports entity = new UserReports( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // username
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // encounter
            cursor.getLong(offset + 2), // offline_form_id
            cursor.getLong(offset + 3), // encounter_filled
            cursor.getLong(offset + 4), // encounter_uploaded
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // workflowUUID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // componentFormUUID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserReports entity, int offset) {
        entity.setUsername(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEncounter(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOffline_form_id(cursor.getLong(offset + 2));
        entity.setEncounter_filled(cursor.getLong(offset + 3));
        entity.setEncounter_uploaded(cursor.getLong(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWorkflowUUID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComponentFormUUID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserReports entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserReports entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserReports entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
