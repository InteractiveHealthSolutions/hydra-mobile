package com.ihsinformatics.dynamicformsgenerator.data.pojos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_credentials".
*/
public class UserCredentialsDao extends AbstractDao<UserCredentials, Long> {

    public static final String TABLENAME = "user_credentials";

    /**
     * Properties of entity UserCredentials.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "username");
        public final static Property Password = new Property(2, String.class, "password", false, "password");
        public final static Property Gender = new Property(3, String.class, "gender", false, "gender");
        public final static Property FullName = new Property(4, String.class, "fullName", false, "full_name");
        public final static Property Uuid = new Property(5, String.class, "uuid", false, "uuid");
        public final static Property ProviderUUID = new Property(6, String.class, "providerUUID", false, "provider_uuid");
    }


    public UserCredentialsDao(DaoConfig config) {
        super(config);
    }
    
    public UserCredentialsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_credentials\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"username\" TEXT NOT NULL UNIQUE ," + // 1: username
                "\"password\" TEXT," + // 2: password
                "\"gender\" TEXT," + // 3: gender
                "\"full_name\" TEXT," + // 4: fullName
                "\"uuid\" TEXT NOT NULL UNIQUE ," + // 5: uuid
                "\"provider_uuid\" TEXT);"); // 6: providerUUID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_credentials\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserCredentials entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(5, fullName);
        }
        stmt.bindString(6, entity.getUuid());
 
        String providerUUID = entity.getProviderUUID();
        if (providerUUID != null) {
            stmt.bindString(7, providerUUID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserCredentials entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(5, fullName);
        }
        stmt.bindString(6, entity.getUuid());
 
        String providerUUID = entity.getProviderUUID();
        if (providerUUID != null) {
            stmt.bindString(7, providerUUID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserCredentials readEntity(Cursor cursor, int offset) {
        UserCredentials entity = new UserCredentials( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fullName
            cursor.getString(offset + 5), // uuid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // providerUUID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserCredentials entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUuid(cursor.getString(offset + 5));
        entity.setProviderUUID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserCredentials entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserCredentials entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserCredentials entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
